#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 查询中国两地直线距离

import os
import json
import sqlite3
from geopy.distance import geodesic

BASE_PATH = os.path.dirname(os.path.abspath(__file__))
JSON_PATH = os.path.join(BASE_PATH, 'geoinfo-all.json')
DB_PATH = os.path.join(BASE_PATH, 'geoinfo-all.db')


def save_db(all_city_list):
    """ save [(city_name,(lat,log),level),..] into db """
    cx = sqlite3.connect(DB_PATH)
    cu = cx.cursor()
    cu.execute("""create table if not exists geo_info(
        district varchar(50), city varchar(50), prov varchar(50),
        lat real, log real, LEVEL integer)""")
    cu.execute("delete from geo_info")

    cx.commit()

    for item in all_city_list:
        cu.execute("insert into geo_info values (?,?,?,?,?,?)", item)

    cx.commit()
    cx.close()


def query_db(loc_name):
    # loc_name = loc_name.strip()
    cx = sqlite3.connect(DB_PATH)
    cu = cx.cursor()
    cu.execute("select * from geo_info where district like '"+loc_name+"%'", )
    cf = cu.fetchall()
    if len(cf) != 1:
        print('[%s]查询结果不唯一, 请输入更准确的地名' % loc_name)
        for city in cf:
            print(city[0], city[1], city[2], city[3], city[4])
        print('\n')
        return
    else:
        city = cf[0]
        return(city[0], city[1], city[2], city[3], city[4])

def load_data():
    with open(JSON_PATH, 'r', encoding='utf-8') as fj:
        geo_json = json.load(fj)

    all_city = []
    for prov in geo_json:
        if len(prov['districts']) == 0:
            all_city.append((
                prov['name'],
                prov['name'],
                prov['name'],
                float(prov['center'].split(',')[1]),
                float(prov['center'].split(',')[0]),
                1
            ))
        for city in prov['districts']:
            all_city.append((
                city['name'],
                city['name'],
                prov['name'],
                float(city['center'].split(',')[1]),
                float(city['center'].split(',')[0]),
                2
            ))
            for district in city['districts']:
                all_city.append((
                    district['name'],
                    city['name'],
                    prov['name'],
                    float(district['center'].split(',')[1]),
                    float(district['center'].split(',')[0]),
                    3
                ))

    return all_city

def main(argv):
    save_db(load_data())      # 若需要重新生成, 请再次执行
    if len(argv) != 3:
        city_a = input('输入起点:')
        city_b = input('输入终点:')
    else:
        city_a = argv[1]
        city_b = argv[2]

    city_a = query_db(city_a)
    city_b = query_db(city_b)

    if city_a and city_b:
        loc_a = (city_a[3], city_a[4])
        loc_b = (city_b[3], city_b[4])
        print("从[%s]到[%s]的距离是: %d km" % (
            city_a[2]+'-'+city_a[1]+'-'+city_a[0],
            city_b[2]+'-'+city_b[1]+'-'+city_b[0],
            int(geodesic(loc_a, loc_b).km)
            ))


if __name__ == '__main__':
    save_db(load_data())      
    # city_list = [['哈尔滨', '长春'], ['哈尔滨', '大庆'], ['哈尔滨', '齐齐哈尔'], ['长春', '通化'], 
    #              ['长春', '白山'], ['长春', '辽源'], ['石家庄', '唐山'], ['石家庄', '秦皇岛'], 
    #              ['石家庄', '邯郸'], ['唐山', '沧州'], ['唐山', '廊坊'], ['唐山', '衡水'], ['太原', '大同'], 
    #              ['太原', '阳泉'], ['太原', '长治'], ['大同', '朔州'], ['大同', '晋中'], ['大同', '运城'], 
    #              ['呼和浩特', '包头'], ['呼和浩特', '乌海'], ['呼和浩特', '赤峰'], ['包头', '鄂尔多斯'], ['包头', '呼伦贝尔'],
    #              ['包头', '巴彦淖尔'], ['乌海', '阿拉善盟'], ['赤峰', '通辽'], ['赤峰', '兴安盟'], ['通辽', '锡林郭勒盟'], 
    #              ['济南', '青岛'], ['济南', '淄博'], ['济南', '枣庄'], ['青岛', '烟台'], ['青岛', '潍坊'], ['青岛', '威海'], 
    #              ['淄博', '东营'], ['淄博', '济宁'], ['淄博', '泰安'], ['枣庄', '临沂'], ['枣庄', '德州'], ['东营', '滨州'], 
    #              ['东营', '菏泽'], ['烟台', '威海'], ['烟台', '日照'], ['潍坊', '济宁'], ['潍坊', '泰安'], ['潍坊', '临沂'],
    #              ['济宁', '泰安'], ['济宁', '聊城'], ['泰安', '威海'], ['威海', '日照'], ['日照', '临沂'], ['南京', '无锡'], 
    #              ['南京', '常州'], ['南京', '苏州'], ['无锡', '南通'], ['无锡', '连云港'], ['无锡', '淮安'], ['常州', '镇江'], 
    #              ['常州', '泰州'], ['常州', '宿迁'], ['苏州', '南通'], ['苏州', '盐城'], ['苏州', '扬州'], ['南通', '连云港'], 
    #              ['南通', '淮安'], ['南通', '盐城'], ['连云港', '淮安'], ['连云港', '盐城'], ['连云港', '扬州'], ['淮安', '盐城'], 
    #              ['淮安', '扬州'], ['淮安', '镇江'], ['盐城', '扬州'], ['盐城', '泰州'], ['扬州', '镇江'], ['扬州', '泰州'], 
    #              ['镇江', '泰州'], ['镇江', '宿迁'], ['泰州', '宿迁'], ['杭州', '宁波'], ['杭州', '温州'], ['杭州', '嘉兴'], 
    #              ['宁波', '温州'], ['宁波', '舟山'], ['宁波', '台州'], ['温州', '嘉兴'], ['温州', '湖州'], ['温州', '绍兴'], 
    #              ['嘉兴', '湖州'], ['嘉兴', '绍兴'], ['嘉兴', '金华'], ['湖州', '绍兴'], ['湖州', '金华'], ['湖州', '衢州'], 
    #              ['绍兴', '金华'], ['绍兴', '衢州'], ['绍兴', '舟山'], ['金华', '衢州'], ['金华', '舟山'], ['金华', '台州'], 
    #              ['衢州', '舟山'], ['衢州', '台州'], ['舟山', '台州'], ['台州', '丽水'], ['合肥', '芜湖'], ['合肥', '蚌埠'], 
    #              ['合肥', '淮南'], ['芜湖', '马鞍山'], ['芜湖', '淮北'], ['芜湖', '铜陵'], ['蚌埠', '淮南'], ['蚌埠', '马鞍山'],
    #              ['蚌埠', '铜陵'], ['淮南', '马鞍山'], ['淮南', '淮北'], ['淮南', '铜陵'], ['马鞍山', '淮北'], ['马鞍山', '铜陵'], 
    #              ['马鞍山', '安庆'], ['淮北', '铜陵'], ['淮北', '安庆'], ['铜陵', '安庆'], ['铜陵', '黄山'], ['安庆', '黄山']]
    city_list=[['哈尔滨市', '长春市'], ['哈尔滨市', '大庆市'], ['哈尔滨市', '齐齐哈尔市'], ['长春市', '通化市'], ['长春市', '白山市'], ['长春市', '辽源市'], ['石家庄市', '唐山市'], ['石家庄市', '秦皇岛市'], ['石家庄市', '邯郸市'], ['唐山市', '沧州市'], ['唐山市', '廊坊市'], ['唐山市', '衡水市'], ['太原市', '大同市'], ['太原市', '阳泉市'], ['太原市', '长治市'], ['大同市', '朔州市'], ['大同市', '晋中市'], ['大同市', '运城市'], ['呼和浩特市', '包头市'], ['呼和浩特市', '乌海市'], ['呼和浩特市', '赤峰市'], ['包头市', '鄂尔多斯市'], ['包头市', '呼伦贝尔市'], ['包头市', '巴彦淖尔市'], ['乌海市', '阿拉善盟市'], ['赤峰市', '通辽市'], ['赤峰市', '兴安盟市'], ['通辽市', '锡林郭勒盟市'], ['济南市', '青岛市'], ['济南市', '淄博市'], ['济南市', '枣庄市'], ['青岛市', '烟台市'], ['青岛市', '潍坊市'], ['青岛市', '威海市'], ['淄博市', '东营市'], ['淄博市', '济宁市'], ['淄博市', '泰安市'], ['枣庄市', '临沂市'], ['枣庄市', '德州市'], ['东营市', '滨州市'], ['东营市', '菏泽市'], ['烟台市', '威海市'], ['烟台市', '日照市'], ['潍坊市', '济宁市'], ['潍坊市', '泰安市'], ['潍坊市', '临沂市'], ['济宁市', '泰安市'], ['济宁市', '聊城市'], ['泰安市', '威海市'], ['威海市', '日照市'], ['日照市', '临沂市'], ['南京市', '无锡市'], ['南京市', '常州市'], ['南京市', '苏州市'], ['无锡市', '南通市'], ['无锡市', '连云港市'], ['无锡市', '淮安市'], ['常州市', '镇江市'], ['常州市', '泰州市'], ['常州市', '宿迁市'], ['苏州市', '南通市'], ['苏州市', '盐城市'], ['苏州市', '扬州市'], ['南通市', '连云港市'], ['南通市', '淮安市'], ['南通市', '盐城市'], ['连云港市', '淮安市'], ['连云港市', '盐城市'], ['连云港市', '扬州市'], ['淮安市', '盐城市'], ['淮安市', '扬州市'], ['淮安市', '镇江市'], ['盐城市', '扬州市'], ['盐城市', '泰州市'], ['扬州市', '镇江市'], ['扬州市', '泰州市'], ['镇江市', '泰州市'], ['镇江市', '宿迁市'], ['泰州市', '宿迁市'], ['杭州市', '宁波市'], ['杭州市', '温州市'], ['杭州市', '嘉兴市'], ['宁波市', '温州市'], ['宁波市', '舟山市'], ['宁波市', '台州市'], ['温州市', '嘉兴市'], ['温州市', '湖州市'], ['温州市', '绍兴市'], ['嘉兴市', '湖州市'], ['嘉兴市', '绍兴市'], ['嘉兴市', '金华市'], ['湖州市', '绍兴市'], ['湖州市', '金华市'], ['湖州市', '衢州市'], ['绍兴市', '金华市'], ['绍兴市', '衢州市'], ['绍兴市', '舟山市'], ['金华市', '衢州市'], ['金华市', '舟山市'], ['金华市', '台州市'], ['衢州市', '舟山市'], ['衢州市', '台州市'], ['舟山市', '台州市'], ['台州市', '丽水市'], ['合肥市', '芜湖市'], ['合肥市', '蚌埠市'], ['合肥市', '淮南市'], ['芜湖市', '马鞍山市'], ['芜湖市', '淮北市'], ['芜湖市', '铜陵市'], ['蚌埠市', '淮南市'], ['蚌埠市', '马鞍山市'], ['蚌埠市', '铜陵市'], ['淮南市', '马鞍山市'], ['淮南市', '淮北市'], ['淮南市', '铜陵市'], ['马鞍山市', '淮北市'], ['马鞍山市', '铜陵市'], ['马鞍山市', '安庆市'], ['淮北市', '铜陵市'], ['淮北市', '安庆市'], ['铜陵市', '安庆市'], ['铜陵市', '黄山市'], ['安庆市', '黄山市']]
    city_len = len(city_list)
    
    new_edges=[]
    for i in range(city_len):
        city_a = city_list[i][0]
        city_b = city_list[i][1]
        city_a = query_db(city_a)
        city_b = query_db(city_b)
        if city_a and city_b:
            loc_a = (city_a[3], city_a[4])
            loc_b = (city_b[3], city_b[4])
            print(int(geodesic(loc_a, loc_b).km))

            
            new_edges.append((city_a[1].split('市')[0],city_b[1].split('市')[0],int(geodesic(loc_a, loc_b).km)))
            print(new_edges)


    edges = [
        ("北京", "天津", 137),
        ("北京", "郑州", 695),
        ("天津", "徐州", 674),
        ("徐州", "郑州", 349),
        ("徐州", "上海", 651),
        ("郑州", "西安", 511),
        ("郑州", "武汉", 534),
        ("西安", "兰州", 676),
        ("西安", "成都", 842),
        ("兰州", "西宁", 216),
        ("成都", "昆明", 1100),
        ("成都", "贵阳", 967),
        ("昆明", "贵阳", 639),
        ("贵阳", "柳州", 607),
        ("贵阳", "株州", 902),
        ("柳州", "南宁", 255),
        ("柳州", "株洲", 672),
        ("株洲", "广州", 675),
        ("株洲", "南昌", 367),
        ("株洲", "武汉", 409),
        ("上海", "南昌", 825),
        ("南昌", "福州", 622),
        ("深圳", "广州", 140),
    ]

with open("map_new_data.txt", "w",encoding="utf-8") as file:
    for edge in edges:
        src, dest, dist = edge
        file.write(f"{src} {dest} {dist}\n")
    for edge in new_edges:
        src, dest, dist = edge
        file.write(f"{src} {dest} {dist}\n")

